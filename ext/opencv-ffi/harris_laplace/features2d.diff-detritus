Index: test/test_detectordescriptor_evaluation.cpp
===================================================================
--- test/test_detectordescriptor_evaluation.cpp	(revisione 5053)
+++ test/test_detectordescriptor_evaluation.cpp	(copia locale)
@@ -706,20 +706,43 @@
     calcQuality[di].resize(TEST_CASE_COUNT);
 
     vector<KeyPoint> keypoints1;
-    detector->detect( imgs[0], keypoints1 );
-    writeKeypoints( keypontsFS, keypoints1, 0);
-    int progressCount = DATASETS_COUNT*TEST_CASE_COUNT;
-    for( int ci = 0; ci < TEST_CASE_COUNT; ci++ )
-    {
-        progress = update_progress( progress, di*TEST_CASE_COUNT + ci, progressCount, 0 );
-        vector<KeyPoint> keypoints2;
-        float rep;
-        evaluateFeatureDetector( imgs[0], imgs[ci+1], Hs[ci], &keypoints1, &keypoints2,
-                                 rep, calcQuality[di][ci].correspondenceCount,
-                                 detector );
-        calcQuality[di][ci].repeatability = rep == -1 ? rep : 100.f*rep;
-        writeKeypoints( keypontsFS, keypoints2, ci+1);
-    }
+    vector<Elliptic_KeyPoint>ekeypoints1;
+    if(!algName.compare("HarrisAffine")){
+		Ptr<HarrisAffineFeatureDetector> specDetector = new HarrisAffineFeatureDetector();
+			specDetector->detect(imgs[0],ekeypoints1);
+			keypoints1 = vector<KeyPoint>(ekeypoints1.begin(), ekeypoints1.end());
+			writeKeypoints( keypontsFS, keypoints1, 0);
+			int progressCount = DATASETS_COUNT*TEST_CASE_COUNT;
+			for( int ci = 0; ci < TEST_CASE_COUNT; ci++ )
+			{
+				progress = update_progress( progress, di*TEST_CASE_COUNT + ci, progressCount, 0 );
+				vector<KeyPoint> keypoints2;
+				vector<Elliptic_KeyPoint> ekeypoints2;
+				float rep;
+				evaluateFeatureDetector( imgs[0], imgs[ci+1], Hs[ci], &ekeypoints1, &ekeypoints2,
+										 rep, calcQuality[di][ci].correspondenceCount,
+										 specDetector );
+				calcQuality[di][ci].repeatability = rep == -1 ? rep : 100.f*rep;
+				keypoints2 = vector<KeyPoint>(ekeypoints2.begin(), ekeypoints2.end());
+				writeKeypoints( keypontsFS, keypoints2, ci+1);
+			}
+		}else
+		{
+		detector->detect( imgs[0], keypoints1 );
+		writeKeypoints( keypontsFS, keypoints1, 0);
+		int progressCount = DATASETS_COUNT*TEST_CASE_COUNT;
+		for( int ci = 0; ci < TEST_CASE_COUNT; ci++ )
+		{
+			progress = update_progress( progress, di*TEST_CASE_COUNT + ci, progressCount, 0 );
+			vector<KeyPoint> keypoints2;
+			float rep;
+			evaluateFeatureDetector( imgs[0], imgs[ci+1], Hs[ci], &keypoints1, &keypoints2,
+									 rep, calcQuality[di][ci].correspondenceCount,
+									 detector );
+			calcQuality[di][ci].repeatability = rep == -1 ? rep : 100.f*rep;
+			writeKeypoints( keypontsFS, keypoints2, ci+1);
+		}
+	}
 }
 
 void testLog( cvtest::TS* ts, bool isBadAccuracy )
@@ -1160,7 +1183,17 @@
 // Detectors
 //DetectorQualityTest fastDetectorQuality = DetectorQualityTest( "FAST", "quality-detector-fast" );
 //DetectorQualityTest gfttDetectorQuality = DetectorQualityTest( "GFTT", "quality-detector-gftt" );
-//DetectorQualityTest harrisDetectorQuality = DetectorQualityTest( "HARRIS", "quality-detector-harris" );
+
+//DetectorQualityTest harrisDetectorQuality = DetectorQualityTest( "HARRIS");
+//TEST(Features2d_Harris, quality) { harrisDetectorQuality; harrisDetectorQuality.safe_run(); }
+
+
+TEST(Features2d_HarrisLaplace, quality) { 
+	DetectorQualityTest harrislaplaceDetectorQuality = DetectorQualityTest( "HarrisLaplace" );
+	harrislaplaceDetectorQuality.safe_run(); 
+	}
+DetectorQualityTest harrisaffineDetectorQuality = DetectorQualityTest( "HarrisAffine");
+TEST(Features2d_HarrisAffine, quality) { harrisaffineDetectorQuality; harrisaffineDetectorQuality.safe_run(); }
 //DetectorQualityTest mserDetectorQuality = DetectorQualityTest( "MSER", "quality-detector-mser" );
 //DetectorQualityTest starDetectorQuality = DetectorQualityTest( "STAR", "quality-detector-star" );
 //DetectorQualityTest siftDetectorQuality = DetectorQualityTest( "SIFT", "quality-detector-sift" );
Index: src/evaluation.cpp
===================================================================
--- src/evaluation.cpp	(revisione 5053)
+++ src/evaluation.cpp	(copia locale)
@@ -86,6 +86,7 @@
 
     static void convert( const vector<KeyPoint>& src, vector<EllipticKeyPoint>& dst );
     static void convert( const vector<EllipticKeyPoint>& src, vector<KeyPoint>& dst );
+	static void convert(const vector<Elliptic_KeyPoint>& src, vector<EllipticKeyPoint>& dst);
 
     static Mat_<double> getSecondMomentsMatrix( const Scalar& _ellipse );
     Mat_<double> getSecondMomentsMatrix() const;
@@ -174,6 +175,27 @@
     }
 }
 
+void EllipticKeyPoint::convert(const vector<Elliptic_KeyPoint>& src, vector<EllipticKeyPoint>& dst)
+{
+    if (!src.empty())
+    {
+        dst.resize(src.size());
+        for (size_t i = 0; i < src.size(); i++)
+        {
+            
+            Mat transf = src[i].transf; //square root of second moment matrix
+            Mat_<float> M(2, 2);
+            M(0, 0) = transf.at<float> (0, 0);
+            M(0, 1) = M(1, 0) = transf.at<float> (1, 0);
+            M(1, 1) = transf.at<float> (1, 1);
+            M = M.inv() * 3 * src[i].si;
+            M = M * M;
+            M = M.inv();
+            dst[i] = EllipticKeyPoint(src[i].centre, Scalar(M(0, 0), M(1, 0), M(1, 1)));
+        }
+    }
+}
+
 void EllipticKeyPoint::calcProjection( const vector<EllipticKeyPoint>& src, const Mat_<double>& H, vector<EllipticKeyPoint>& dst )
 {
     if( !src.empty() )
@@ -565,3 +587,87 @@
 
     computeRecallPrecisionCurve( *matches1to2, *correctMatches1to2Mask, recallPrecisionCurve );
 }
+
+
+
+static void calculateRepeatability(const Mat& img1, const Mat& img2, const Mat& H1to2,
+        const vector<Elliptic_KeyPoint>& _keypoints1, const vector<Elliptic_KeyPoint>& _keypoints2,
+        float& repeatability, int& correspondencesCount, Mat* thresholdedOverlapMask = 0)
+{
+    vector<EllipticKeyPoint> keypoints1, keypoints2, keypoints1t, keypoints2t;
+    EllipticKeyPoint::convert(_keypoints1, keypoints1);
+    EllipticKeyPoint::convert(_keypoints2, keypoints2);
+
+    // calculate projections of key points
+    EllipticKeyPoint::calcProjection(keypoints1, H1to2, keypoints1t);
+
+    Mat H2to1;
+    invert(H1to2, H2to1);
+    EllipticKeyPoint::calcProjection(keypoints2, H2to1, keypoints2t);
+    
+    float overlapThreshold;
+    bool ifEvaluateDetectors = thresholdedOverlapMask == 0;
+    if (ifEvaluateDetectors)
+    {
+        overlapThreshold = 1.f - 0.4f;
+
+        // remove key points from outside of the common image part
+        Size sz1 = img1.size(), sz2 = img2.size();
+        filterEllipticKeyPointsByImageSize(keypoints1, sz1);
+        filterEllipticKeyPointsByImageSize(keypoints1t, sz2);
+        filterEllipticKeyPointsByImageSize(keypoints2, sz2);
+        filterEllipticKeyPointsByImageSize(keypoints2t, sz1);
+    } else
+    {
+        overlapThreshold = 1.f - 0.5f;
+
+        thresholdedOverlapMask->create((int) keypoints1.size(), (int) keypoints2t.size(), CV_8UC1);
+        thresholdedOverlapMask->setTo(Scalar::all(0));
+    }
+    size_t minCount = min(keypoints1.size(), keypoints2t.size());
+    
+    // calculate overlap errors
+    vector<SIdx> overlaps;
+    computeOneToOneMatchedOverlaps(keypoints1, keypoints2t, ifEvaluateDetectors, overlaps,
+            overlapThreshold/*min overlap*/);
+
+    correspondencesCount = -1;
+    repeatability = -1.f;
+    if (overlaps.empty())
+        return;
+
+    if (ifEvaluateDetectors)
+    {
+        // regions one-to-one matching
+        correspondencesCount = (int) overlaps.size();
+        repeatability = minCount ? (float) correspondencesCount / minCount : -1;
+
+    } else
+    {
+        for (size_t i = 0; i < overlaps.size(); i++)
+        {
+            int y = overlaps[i].i1;
+            int x = overlaps[i].i2;
+            thresholdedOverlapMask->at<uchar> (y, x) = 1;
+        }
+    }
+}
+void cv::evaluateFeatureDetector(const Mat& img1, const Mat& img2, const Mat& H1to2, vector<
+        Elliptic_KeyPoint>* _keypoints1, vector<Elliptic_KeyPoint>* _keypoints2,
+        float& repeatability, int& correspCount, const Ptr<HarrisAffineFeatureDetector>& _fdetector)
+{
+    Ptr<HarrisAffineFeatureDetector> fdetector(_fdetector);
+    vector<Elliptic_KeyPoint> *keypoints1, *keypoints2, buf1, buf2;
+    keypoints1 = _keypoints1 != 0 ? _keypoints1 : &buf1;
+    keypoints2 = _keypoints2 != 0 ? _keypoints2 : &buf2;
+
+    if ((keypoints1->empty() || keypoints2->empty()) && fdetector.empty())
+        CV_Error(CV_StsBadArg, "fdetector must be no empty when keypoints1 or keypoints2 is empty");
+
+    if (keypoints1->empty())
+        fdetector->detect(img1, *keypoints1);
+    if (keypoints2->empty())
+        fdetector->detect(img2, *keypoints2);
+    
+    calculateRepeatability(img1, img2, H1to2, *keypoints1, *keypoints2, repeatability, correspCount);
+}

